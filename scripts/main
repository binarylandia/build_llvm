#!/usr/bin/env bash

set -euxo pipefail

LLVM_REPO_URL="https://github.com/llvm/llvm-project"
#BRANCH="llvmorg-17.0.6"
BRANCH="llvmorg-18.1.8"
#BRANCH="llvmorg-19.1.3"
VERSION=${BRANCH#*-}

BUILD_DIR=".build"
INSTALL_DIR="/opt/llvm"
OUT_DIR=".out"

NICE="nice -19 ionice -c2 -n5"
JOBS="${JOBS:=$(($(nproc --all) + 2))}"

export build_time="$(date -u '+%Y-%m-%d_%H-%M-%S')"

function abspath() {
  readlink -m "$1"
}

function log() {
  tee -a "${1}" | \
    GREP_COLOR='01;31' stdbuf -oL grep --color=always -iE "err|error|fail|can not|cannot|can't|unable|exception|critical|fatal|reject|deny|denied|terminat|abort|panic|fault|" | \
    GREP_COLOR='01;33' stdbuf -oL grep --color=always -iE "warn|warning|caution|alert|notice|" | \
    GREP_COLOR='01;36' stdbuf -oL grep --color=always -iE "note|info|status|detail|"
}

function package() {
  local input_dir="${1}"
  local output_tarball="${2}"

  ${NICE} find "${input_dir}" -printf "%P\n" \
    | ${NICE} tar --no-recursion -cf - -C "${input_dir}" --files-from=- \
    | ${NICE} xz -T0 -k > "${output_tarball}"
}

export THIS_DIR="$(abspath "$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)")"
export ROOT_DIR="$(abspath "${THIS_DIR}/..")"

build_dir="$(abspath ${BUILD_DIR})"
mkdir -p "${build_dir}"
outdir="$(abspath "${OUT_DIR}")"
mkdir -p "${outdir}"

pushd "$build_dir" >/dev/null
  src_dir="llvm-${VERSION}"

  if [ ! -d "${src_dir}" ]; then
    git clone --recursive --depth=1 -b "${BRANCH}" "${LLVM_REPO_URL}" "${src_dir}"

    pushd "${src_dir}" >/dev/null
      for patch in $(ls "${ROOT_DIR}/patches/"*.patch | sort); do
        patch -N --silent --force -p1 < "$patch"
      done
    popd >/dev/null
  fi

  pushd "${src_dir}" >/dev/null

    export CFLAGS="-w -g0 -Os ${CFLAGS:-}"
    export CXXFLAGS="-w -g0 -Os ${CXXFLAGS:-}"
    export LDFLAGS="-s ${LDFLAGS:-}"

    export CCACHE_DIR="/cache/ccache"
    export CCACHE_NOCOMPRESS="1"
    export CCACHE_MAXSIZE="50G"
    export CMAKE_C_COMPILER_LAUNCHER="ccache"
    export CMAKE_CXX_COMPILER_LAUNCHER="ccache"


    ${NICE} cmake -S llvm -B "build" \
      -Wno-dev -Wno-deprecated \
      -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" \
      -DCMAKE_BUILD_TYPE="MinSizeRel" \
      -DCMAKE_COLOR_MAKEFILE="OFF" \
      -DCMAKE_VERBOSE_MAKEFILE="OFF" \
      \
      -DPython_EXECUTABLE="/opt/python/cp38-cp38/bin/python3" \
      -DSWIG_EXECUTABLE="/opt/python/cp38-cp38/bin/swig" \
      \
      -DLLVM_ENABLE_PROJECTS="clang;lld" \
      -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM" \
      -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN="ON" \
      -DLLVM_INSTALL_TOOLCHAIN_ONLY="ON" \
      \
      -DCLANG_BUILD_TOOLS="ON" \
      -DCLANG_ENABLE_ARCMT="OFF" \
      -DCLANG_ENABLE_STATIC_ANALYZER="OFF" \
      -DCLANG_PLUGIN_SUPPORT="ON" \
      -DLIBCXX_ENABLE_ABI_LINKER_SCRIPT="OFF" \
      -DLLVM_BUILD_TOOLS="OFF" \
      \
      -DLLVM_BUILD_TESTS="OFF" \
      -DLLVM_ENABLE_DOXYGEN="OFF" \
      -DLLVM_ENABLE_LIBEDIT="OFF" \
      -DLLVM_ENABLE_LIBXML2="OFF" \
      -DLLVM_ENABLE_OCAMLDOC="OFF" \
      -DLLVM_ENABLE_SPHINX="OFF" \
      -DLLVM_ENABLE_TERMINFO="OFF" \
      -DLLVM_ENABLE_THREADS="ON" \
      -DLLVM_ENABLE_ZLIB="ON" \
      -DLLVM_ENABLE_ZSTD="ON" \
      -DLLVM_INCLUDE_BENCHMARKS="OFF" \
      -DLLVM_INCLUDE_DOCS="OFF" \
      -DLLVM_INCLUDE_EXAMPLES="OFF" \
      -DLLVM_INCLUDE_TESTS="OFF" \
      -DLLVM_INCLUDE_UTILS="OFF" \
      2>&1 | log "build.log"

    ${NICE} cmake --build "build" --parallel="${JOBS}" 2>&1 | log "build.log"

    ${NICE} cmake --install "build" 2>&1 | log "build.log"


    ${ROOT_DIR}/scripts/is-static-binary "${INSTALL_DIR}"/bin/clang || true

    readelf -d "${INSTALL_DIR}"/bin/clang || true

    "${INSTALL_DIR}"/bin/clang -v || true

    cp "build.log" "${INSTALL_DIR}/"

    package "${INSTALL_DIR}" "${outdir}/llvm-${VERSION}-${build_time}.tar.xz"
  popd >/dev/null
popd >/dev/null

