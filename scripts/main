#!/usr/bin/env bash

set -euxo pipefail

LLVM_REPO_URL="https://github.com/llvm/llvm-project"
#BRANCH="llvmorg-17.0.6"
#BRANCH="llvmorg-18.1.8"
BRANCH="llvmorg-19.1.5"
VERSION=${BRANCH#*-}

export CFLAGS="-w -g0 -Os ${CFLAGS:-}"
export CXXFLAGS="-w -g0 -Os ${CXXFLAGS:-}"
export LDFLAGS="-s ${LDFLAGS:-}"

export CFLAGS="-static-libgcc -static-libstdc++ ${CFLAGS:-}"
export CXXFLAGS="-static-libgcc -static-libstdc++ ${CXXFLAGS:-}"
export LDFLAGS="-static-libgcc -static-libstdc++ ${LDFLAGS:-}"

#export CFLAGS="-static --static ${CFLAGS:-}"
#export CXXFLAGS="-static --static ${CXXFLAGS:-}"
#export LDFLAGS="-static --static ${LDFLAGS:-}"

export CFLAGS="-fPIC ${CFLAGS:-}"
export CXXFLAGS="-fPIC ${CXXFLAGS:-}"
export LDFLAGS="-fPIC ${LDFLAGS:-}"

export CC="${CC:-gcc}"
export CXX="${CXX:-g++}"
export AR="${AR:-gcc-ar}"
export NM="${NM:-gcc-nm}"
export RANLIB="${RANLIB:-gcc-ranlib}"

export CCACHE_DIR="/cache/ccache"
export CCACHE_NOCOMPRESS="1"
export CCACHE_MAXSIZE="50G"
export CMAKE_C_COMPILER_LAUNCHER="ccache"
export CMAKE_CXX_COMPILER_LAUNCHER="ccache"

BUILD_DIR=".build"
INSTALL_DIR="/opt/llvm"
OUT_DIR=".out"

export NICE="nice -19 ionice -c2 -n5"
export JOBS="${JOBS:=$(($(nproc --all) + 2))}"

export build_time="$(date -u '+%Y-%m-%d_%H-%M-%S')"

function abspath() {
  readlink -m "$1"
}
export -f abspath

function log() {
  tee -a "${1}" | \
    GREP_COLOR='01;31' grep --line-buffered --color=always -iE "\b(err|error|fail|can not|cannot|can't|unable|critical|fatal|reject|deny|denied|terminat|abort|panic|fault|invalid|undefined symbol|not found|)\b" | \
    GREP_COLOR='01;33' grep --line-buffered --color=always -iE "\b(warn|warning|caution|alert|notice|)\b" | \
    GREP_COLOR='01;36' grep --line-buffered --color=always -iE "\b(note|info|status|detail|)\b"
}
export -f log

function package_xz() {
  local input_dir="${1}"
  local output_basename="${2}"
  mkdir -p "$(dirname "${output_basename}")"
  ${NICE} bash -c "find '${input_dir}' -printf '%P\\n' | tar --posix -cf - -C '${input_dir}' --files-from=- | xz -T $(nproc) -5 > '${output_basename}.tar.xz'"
}
export -f package_xz

function package_gz() {
  local input_dir="${1}"
  local output_basename="${2}"
  mkdir -p "$(dirname "${output_basename}")"
  ${NICE} bash -c "find '${input_dir}' -printf '%P\\n' | tar --posix -cf - -C '${input_dir}' --files-from=- | pigz -p $(nproc) -7 > '${output_basename}.tar.gz'"
}
export -f package_gz

function package_zst() {
  local input_dir="${1}"
  local output_basename="${2}"
  mkdir -p "$(dirname "${output_basename}")"
  ${NICE} bash -c "find '${input_dir}' -printf '%P\\n' | tar --posix -cf - -C '${input_dir}' --files-from=- | zstdmt -T$(nproc) -7 > '${output_basename}.tar.zst'"
}
export -f package_zst

function package_all() {
  local input_dir="${1}"
  local output_basename="${2}"

  parallel ::: \
    "package_xz '${input_dir}' '${output_basename}'" \
    "package_gz '${input_dir}' '${output_basename}'" \
    "package_zst '${input_dir}' '${output_basename}'"
}
export -f package_all

export THIS_DIR="$(abspath "$(cd "$(dirname "${BASH_SOURCE[0]}")"; pwd)")"
export ROOT_DIR="$(abspath "${THIS_DIR}/..")"

build_dir="$(abspath ${BUILD_DIR})"
mkdir -p "${build_dir}"
outdir="$(abspath "${OUT_DIR}")"
mkdir -p "${outdir}"

pushd "$build_dir" >/dev/null
{
  src_dir="llvm-${VERSION}"

  if [ ! -d "${src_dir}" ]; then
    git clone --recursive --depth=1 -b "${BRANCH}" "${LLVM_REPO_URL}" "${src_dir}"

    pushd "${src_dir}" >/dev/null
    for patch in $(ls "${ROOT_DIR}/patches/"*.patch | sort); do
      patch -N --silent --force -p1 <"$patch"
    done
    popd >/dev/null
  fi

  pushd "${src_dir}" >/dev/null
  {
    ${NICE} cmake -S llvm -B "build" \
      -Wno-dev -Wno-deprecated \
      -DCMAKE_INSTALL_PREFIX="${INSTALL_DIR}" \
      -DCMAKE_BUILD_TYPE="MinSizeRel" \
      -DCMAKE_COLOR_MAKEFILE="OFF" \
      -DCMAKE_VERBOSE_MAKEFILE="OFF" \
      -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;compiler-rt;flang;lld;lldb;openmp" \
      -DLLVM_TARGETS_TO_BUILD="X86;AArch64;ARM" \
      -DLLVM_STATIC_LINK_CXX_STDLIB="ON" \
      \
      -DLLVM_INSTALL_TOOLCHAIN_ONLY="ON" \
      \
      -DLLVM_BUILD_TOOLS="ON" \
      -DLLVM_INCLUDE_TOOLS="ON" \
      -DLLVM_INSTALL_TOOLS="ON" \
      -DLLVM_TOOLS_INSTALL_DIR="bin" \
      \
      -DCLANG_BUILD_TOOLS="ON" \
      -DCLANG_INCLUDE_TOOLS="ON" \
      -DCLANG_INSTALL_TOOLS="ON" \
      -DCLANG_OPENMP_RUNTIME="libomp" \
      -DCLANG_PLUGIN_SUPPORT="ON" \
      \
      -DLLVM_BUILD_RUNTIME="ON" \
      -DLLVM_ENABLE_FFI="ON" \
      -DLLVM_ENABLE_RTTI="ON" \
      -DLLVM_ENABLE_THREADS="ON" \
      -DLLVM_ENABLE_ZLIB="ON" \
      -DLLVM_ENABLE_ZSTD="ON" \
      -DLLVM_USE_PERF="ON" \
      \
      -DLLVM_BINUTILS_INCDIR="/usr/include" \
      \
      -DLLVM_ENABLE_BINDINGS="OFF" \
      -DLLVM_INCLUDE_BENCHMARKS="OFF" \
      -DLLVM_INCLUDE_DOCS="OFF" \
      -DLLVM_INCLUDE_EXAMPLES="OFF" \
      -DLLVM_INCLUDE_TESTS="OFF" \
      -DLLVM_INCLUDE_UTILS="OFF" \
      -DLLVM_INSTALL_BENCHMARKS="OFF" \
      -DLLVM_INSTALL_DOCS="OFF" \
      -DLLVM_INSTALL_EXAMPLES="OFF" \
      -DLLVM_INSTALL_TESTS="OFF" \
      -DLLVM_INSTALL_UTILS="OFF" \
      2>&1 | log "build.log"

    ${NICE} cmake --build "build" --parallel="${JOBS}" 2>&1 | log "build.log"

    ${NICE} cmake --install "build" 2>&1 | log "build.log"

    ${ROOT_DIR}/scripts/is-static-binary "${INSTALL_DIR}"/bin/clang || true

    readelf -d "${INSTALL_DIR}"/bin/clang || true

    "${INSTALL_DIR}"/bin/clang -v || true

    package_all "${INSTALL_DIR}" "${outdir}/llvm-${VERSION}-${build_time}"
  }
  popd >/dev/null
}
popd >/dev/null
